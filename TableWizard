<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Created by Erdman -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML to ReadMe Block Converter</title>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Teachers:ital,wght@0,400..800;1,400..800&display=swap"
        rel="stylesheet">
    <style>
        body {
            background-color: #118cfd;
            padding: 80px 10%;
            font-family: "Teachers", sans-serif;
            font-optical-sizing: auto;
        }

        .container {
            position: relative;
            margin-top: 60px;
            background-color: #ffffff;
            padding: 40px 60px;
            border-radius: 6px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            max-width: 1500px;
        }

        .fixed-character {
            position: absolute;
            right: -130px;
            top: -100px;
            width: 500px;
            height: auto;
            z-index: -1;
        }

        .container,
        .container-lg,
        .container-md,
        .container-sm,
        .container-xl {
            max-width: 1500px;
        }

        textarea {
            font-family: monospace;
            font-size: 12px !important;
            resize: none;
            height: 400px !important;
            overflow-y: scroll;
        }

        .checkbox-custom {
            display: flex;
            align-items: center;
            font-size: 14px;
            margin-right: 10px;
            margin-bottom: 10px;
            padding: 5px 10px;
            background-color: #f1f1f1;
            border-radius: 20px;
            cursor: pointer;
        }

        .checkbox-custom input {
            margin-right: 10px;
            margin-left: 10px;
            width: 12px;
            height: 12px;
            order: 2;
        }

        .checkbox-custom label {
            margin: 0;
            font-size: 14px;
            order: 1;
            cursor: pointer;
        }

        .btn-custom {
            background-color: #c906c9;
            color: white;
            border-radius: 5px;
            transition: background-color 0.3s ease;
            padding: 10px 20px;
            border: none;
            border-radius: 10px 0 0 0px;
            float: right;
            margin-right: 17px;
            opacity: 1;
            z-index: 1;
            position: relative;
        }

        .btn-custom:hover {
            background-color: rgb(255, 75, 255);
            color: white;
        }

        .logo {
            display: flex;
            margin: 0 0 20px 0;
        }

        .logo-container {
            display: flex;
            align-items: center;
            background: white;
            margin-left: -60px;
            margin-top: -99px;
            padding: 25px 30px 15px 50px;
            border-radius: 24px 25px 14px 0px;
            width: 440px;
        }

        .logo-text {
            margin-left: 29px;
            margin-top: -16px;
            font-size: 23px;
            font-weight: bold;
            color: #3e8bf6;
            font-family: "VT323", monospace;
            font-weight: 400;
            font-style: normal;
        }

        .filter-group {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .advanced-settings-content {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: space-between;
            /* This ensures the columns distribute evenly */
        }

        .column {
            display: flex;
            flex-direction: column;
            width: calc(16.66% - 10px);
            /* Adjust the width to accommodate six columns per row */
        }


        .column label {
            margin-bottom: 5px;
            font-weight: bold;
        }

        .column input,
        .column select {
            width: 100%;
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .column input[type="number"]::-webkit-outer-spin-button,
        .column input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .column input[type="number"] {
            -moz-appearance: textfield;
        }

        .column select {
            appearance: none;
            background: #fff url("data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E") no-repeat right 10px center/8px 10px;
        }

        #advancedSettingsContent {
            display: none;
            background: #118cfd12;
            padding: 20px;
            margin-top: 20px;
            border-radius: 20px;
        }

        .advanced-settings-link {
            margin-top: 20px;
            font-size: 18px;
        }

        .advanced-settings-link a:hover {
            text-decoration: none !important;
        }

        input:disabled {
            opacity: 0.5;
        }


        .tooltip-container {
            position: relative;
            display: inline-block;
            cursor: pointer;
        }

        .tooltip-container .tooltip-text {
            visibility: hidden;
            width: 400px;
            background-color: #333;
            color: #fff;
            text-align: left;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -250px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 13px;
        }

        .tooltip-container a:hover {
            text-decoration: none;
        }

        .tooltip-container .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }

        .tooltip-container:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }

        .table-preview {
            font-family: arial;
        }

        .modal-dialog {
            max-width: 90%;
            /* or a specific value like 1500px */
            max-height: 90vh;
            /* Allow some space at the top and bottom */
            margin: auto;
            padding: 60px;
            /* Padding around the modal */
            position: relative;
        }

        .modal-content {
            height: calc(100vh - 120px);
            /* Full height minus the padding */
            display: flex;
            flex-direction: column;
        }

        .modal-body {
            overflow-y: auto;
            padding: 20px;
            flex: 1;
        }

        .modal-footer {
            position: sticky;
            bottom: 0;
            background: white;
            padding: 10px 20px;
            border-top: 1px solid #ddd;
            text-align: right;
        }

        .mobile-message {
            display: none;
        }

        @media (max-width: 960px) {
            body {
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                padding: 0;
                margin: 0;
                background-color: #118cfd;
                background-image: url('https://owlbertsio-resized.s3.amazonaws.com/Traffic.psd.png');
                background-size: 200px;
                background-repeat: no-repeat;
                background-position: right top;
            }

            .container,
            .fixed-character,
            .tooltip-container {
                display: none;
            }

            .mobile-message {
                font-family: "Teachers", sans-serif;
                font-size: 18px;
                color: white;
                text-align: center;
                padding: 20px;
                background: purple;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                display: block;
            }
        }
    </style>
</head>

<body>
    <div class="mobile-message">
        Mobile View Under Construction - Please use desktop version
    </div>


    <div class="container">
        <img src="https://owlbertsio-resized.s3.amazonaws.com/Harry-Potter.psd.png" alt="Character"
            class="fixed-character">

        <!-- ReadMe Logo -->
        <div class="logo-container">
            <img src="https://www.openapis.org/wp-content/uploads/sites/3/2021/12/readme-blue.png" alt="ReadMe Logo"
                class="logo" width="200" height="auto">
            <span class="logo-text">TABLE WIZARD</span>
        </div>

        <!-- Form Elements -->
        <div class="row">
            <div class="col-md-6">
                <label style="font-size:16px;font-weight:bold;" for="inputHtml">HTML Table Input</label>
                <button id="resetButton" class="btn-sm"
                    style="border:none;border-radius:20px;font-size:12px;padding:0px 10px;margin-left: 5px; display: none;margin-top:-5px;padding-bottom:2px;"><span
                        style="font-size:15px;padding:0;margin:0;">⟲</span> Reset</button>
                <textarea id="inputHtml" class="form-control" placeholder="Paste your Table HTML here..."></textarea>
            </div>


            <div class="col-md-6">
                <button id="sampleButton" class="btn btn-custom"
                    style="margin-right:5%;border-radius:20px;padding:5px 15px;margin-bottom: 20px;font-size:14px;margin-top:-20px;">
                    <span style="font-size:15px; vertical-align: top;margin-right:5px;">↙️</span> <strong
                        style="margin-right:5px;">TRY ME!</strong> Insert Demo Table
                </button>

                <label style="font-size:16px;font-weight:bold;" for="outputJson">ReadMe Table Output</label>
                <textarea id="outputJson" class="form-control" readonly
                    placeholder="Converted ReadMe Table will appear here..."></textarea>
                <button id="copyButton" class="btn btn-custom"
                    style="margin-top: -45px;margin-right:15px;">Copy</button>
                <div style="margin-top:1px;background:black;float:right;font-size:12px;color:white;" class="timestamp"
                    id="timestamp">
                </div>
            </div>
        </div>

        <!-- Table Preview -->
        <h3 id="tablePreviewTitle" style="display: none;">
            <hr>
            <span style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                <span>Table Preview</span>
                <span style="font-size: 12px; color: red;">*Tables may appear slightly different when rendered on your
                    ReadMe site.</span>
            </span>
        </h3>
        <div id="tablePreview" class="table-preview"></div>

        <!-- View Full Table Button -->
        <button id="viewFullTableButton" class="btn btn-custom"
            style="display: none;margin-right:1px;margin-top:-45px;">View Full
            Table</button>

        <!-- Full Table Modal -->
        <div class="modal fade" id="fullTableModal" tabindex="-1" role="dialog" aria-labelledby="fullTableModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="fullTableModalLabel">Full Table</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="fullTableContent"></div>
                    </div>

                    <div class="modal-footer"
                        style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="color:red;">*Tables may appear slightly different when rendered on your ReadMe site.
                        </div>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>

                </div>
            </div>
        </div>

        <!-- Advanced Settings -->
        <div class="advanced-settings-link">
            <a href="javascript:void(0)" onclick="toggleAdvancedSettings()">⚙️ Advanced Settings</a>
        </div>
        <div id="advancedSettingsContent">
            <hr>
            <!-- Filter Options -->
            <div style="margin:20px 10px 10px 0;" class="filter-group">
                <div style="margin-top:4px;margin-right:10px;font-size:14px;color:grey;">⛔ Remove Tags:
                </div>
                <div class="checkbox-custom">
                    <label for="filterImages">Images (non-SVG)</label>
                    <input type="checkbox" id="filterImages">
                </div>
                <div class="checkbox-custom">
                    <label for="filterSVGs">SVG</label>
                    <input type="checkbox" id="filterSVGs" checked>
                </div>
                <div class="checkbox-custom">
                    <label for="filterSpans">Span</label>
                    <input type="checkbox" id="filterSpans" checked>
                </div>
                <div class="checkbox-custom">
                    <label for="filterDivs">Div</label>
                    <input type="checkbox" id="filterDivs" checked>
                </div>
                <div class="checkbox-custom">
                    <label for="filterParagraphs">P</label>
                    <input type="checkbox" id="filterParagraphs" checked>
                </div>
                <div class="checkbox-custom">
                    <label for="filterHR">HR</label>
                    <input type="checkbox" id="filterHR" checked>
                </div>
                <div class="checkbox-custom">
                    <label for="filterStyles">Styles/Classes</label>
                    <input type="checkbox" id="filterStyles" checked>
                </div>
            </div>
            <div style="margin:20px 10px 10px 0;" class="filter-group">
                <div style="margin-top:4px;margin-right:10px;font-size:14px;color:grey;"> 🔧 Adjust size and alignment
                    of table columns:
                </div>
                <div style="display:flex;max-width:100%;">
                    <label for="applyWidths" class="checkbox-custom">
                        <input type="checkbox" id="applyWidths"> Enable Fixed Widths
                    </label>
                    <span id="columnsDetected"
                        style="display:block;font-weight: bold; color: red; margin-left: 10px;font-size:12px;margin-top:5px;"></span>
                </div>
            </div>

            <!-- Custom Table ID input -->
            <div style="max-width:220px;margin:20px 10px 10px 0;" class="filter-group">
                <div style="margin-top:4px;margin-right:10px;font-size:14px;color:grey;">🆔 Custom Table ID (Optional):
                </div>
                <input type="text" id="customTableId" placeholder="Enter ID or leave blank for default"
                    style="width:100%; padding:8px; font-size:14px; border:1px solid #ced4da; border-radius:5px;">
            </div>

            <hr>
            <div id="tableHeadingsContainer" style="display: none;">
                <h4>Customize Column Layout</h4>
            </div>
            <div id="colWidthInputContainer" class="advanced-settings-content"></div>

        </div>

    </div>

    <!-- "What does this tool do?" link -->
    <div class="tooltip-container" style="margin-top: 20px;float:right;">
        <a style="color:white;" href="javascript:void(0)">🔍 What does this tool do?</a>
        <div class="tooltip-text">
            <strong>Instructions:</strong><br><br>
            <ul>
                <li><strong>Plug in HTML:</strong> Copy and paste your HTML table.</li>
                <li><strong>Auto Conversion:</strong> Instantly converts to ReadMe format.</li>
                <li><strong>Preview:</strong> See the first few rows for accuracy.</li>
                <li><strong>Adjust Layout:</strong> Tweak row sizes and alignment easily.</li>
                <li><strong>Custom Table ID:</strong> Change the default ID for unique styling.</li>
                <li><strong>Paste in ReadMe:</strong> Insert directly into the editor and save.</li>
            </ul>
        </div>
    </div>


    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- JavaScript for conversion and functionality -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const applyWidthsCheckbox = document.getElementById('applyWidths');
            const colWidthInputContainer = document.getElementById('colWidthInputContainer');
            const copyButton = document.getElementById('copyButton');
            const outputJsonTextarea = document.getElementById('outputJson');
            const advancedSettingsContent = document.getElementById('advancedSettingsContent');
            const sampleButton = document.getElementById('sampleButton');
            const inputHtmlTextarea = document.getElementById('inputHtml');
            const columnsDetected = document.getElementById('columnsDetected');
            const resetButton = document.getElementById('resetButton');
            const viewFullTableButton = document.getElementById('viewFullTableButton');
            const fullTableContent = document.getElementById('fullTableContent');

            applyWidthsCheckbox.addEventListener('change', function () {
                const isChecked = applyWidthsCheckbox.checked;
                enableAdvancedInputs(isChecked);
                convertContent();
            });

            inputHtmlTextarea.addEventListener('input', function () {
                if (inputHtmlTextarea.value.trim() !== '') {
                    resetButton.style.display = 'inline-block';
                } else {
                    resetButton.style.display = 'none';
                }
                convertContent();
            });

            document.querySelectorAll('.checkbox-custom input').forEach(checkbox => {
                checkbox.addEventListener('change', convertContent);
            });

            colWidthInputContainer.addEventListener('input', function (event) {
                if (event.target && event.target.matches('input, select')) {
                    if (event.target.tagName.toLowerCase() === 'input') {
                        let value = event.target.value;

                        // Remove any existing "px" and then append "px" to the value
                        value = value.replace(/px/g, '') + 'px';

                        event.target.value = value;
                        event.target.style.backgroundColor = "#ffff99"; // Highlight input when value is entered
                    }
                    convertContent();
                }
            });

            copyButton.addEventListener('click', function () {
                outputJsonTextarea.select();
                document.execCommand('copy');
                alert('Copied to clipboard!');
            });

            sampleButton.addEventListener('click', function () {
                const sampleHtml = `<table style="width:100%; border-collapse: collapse;">
  <tr style="background-color:#ddd;">
    <th style="border: 1px solid #000; padding: 8px;">Data Type</th>
    <th style="border: 1px solid #000; padding: 8px;">Structure</th>
    <th style="border: 1px solid #000; padding: 8px;">Code Snippet</th>
    <th style="border: 1px solid #000; padding: 8px;">Visual Reference</th>
    <th style="border: 1px solid #000; padding: 8px;">Description</th>
    <th style="border: 1px solid #000; padding: 8px;">Notes</th>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://readme.com/static/owlberts/owlejandro-celebrating.png" alt="Owlejandro celebrating" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>First Item</li>
        <li>Second Item</li>
        <li>Third Item</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Scientist.png.png" alt="Scientist Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>List Item 1</li>
        <li>List Item 2</li>
        <li>List Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Inspector-Owlbert.png.png" alt="Inspector Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://readme.com/static/owlberts/owlejandro-celebrating.png" alt="Owlejandro celebrating" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>First Item</li>
        <li>Second Item</li>
        <li>Third Item</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Scientist.png.png" alt="Scientist Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>List Item 1</li>
        <li>List Item 2</li>
        <li>List Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Inspector-Owlbert.png.png" alt="Inspector Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://readme.com/static/owlberts/owlejandro-celebrating.png" alt="Owlejandro celebrating" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>First Item</li>
        <li>Second Item</li>
        <li>Third Item</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Scientist.png.png" alt="Scientist Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
  <tr>
    <td style="border: 1px solid #000; padding: 8px;">
      <a href="http://www.google.com">Link Test 1</a><br>
      <a href="http://www.google.com">Link Test 2</a><br>
      <a href="http://www.google.com">Link Test 3</a>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <ul>
        <li>List Item 1</li>
        <li>List Item 2</li>
        <li>List Item 3</li>
      </ul>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <code><p>This is my table text</p></code>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <img src="https://owlbertsio-resized.s3.amazonaws.com/Inspector-Owlbert.png.png" alt="Inspector Owlbert" width="100">
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
    <td style="border: 1px solid #000; padding: 8px;">
      <p>This is my table text</p>
    </td>
  </tr>
</table>

`;
                inputHtmlTextarea.value = sampleHtml;
                inputHtmlTextarea.dispatchEvent(new Event('input'));  // Manually trigger the input event
                convertContent();  // Trigger the conversion after inserting the sample
            });

            resetButton.addEventListener('click', function () {
                const confirmation = confirm('Are you sure you want to reset all fields? This action cannot be undone.');
                if (confirmation) {
                    // Clear all input fields
                    inputHtmlTextarea.value = '';
                    document.getElementById('outputJson').value = '';

                    // Reset advanced settings
                    document.querySelectorAll('.checkbox-custom input').forEach(checkbox => {
                        checkbox.checked = true; // or false depending on your default state
                    });

                    document.querySelectorAll('#colWidthInputContainer input').forEach(input => {
                        input.value = '';
                        input.style.backgroundColor = ''; // Remove any highlighting
                    });

                    document.querySelectorAll('#colWidthInputContainer select').forEach(select => {
                        select.selectedIndex = 0; // Reset to first option
                    });

                    // Collapse advanced settings
                    document.getElementById('advancedSettingsContent').style.display = 'none';

                    // Clear column detected message
                    document.getElementById('columnsDetected').textContent = '';

                    // Hide the reset button
                    resetButton.style.display = 'none';

                    // Optionally, re-run the conversion to clear the output
                    convertContent();
                }
            });

            viewFullTableButton.addEventListener('click', function () {
                const html = document.getElementById('inputHtml').value.trim();
                const fullTableHtml = generateFullTablePreview(html);
                fullTableContent.innerHTML = fullTableHtml;
                $('#fullTableModal').modal('show');
            });

            function enableAdvancedInputs(enabled) {
                document.querySelectorAll('#colWidthInputContainer input, #colWidthInputContainer select').forEach(input => {
                    input.disabled = !enabled;
                });
            }

            window.toggleAdvancedSettings = function () {
                const isVisible = advancedSettingsContent.style.display === 'block';
                advancedSettingsContent.style.display = isVisible ? 'none' : 'block';
            }
        });
        function convertContent() {
            const html = document.getElementById('inputHtml').value.trim();
            const tableHeadingsContainer = document.getElementById('tableHeadingsContainer');
            const colWidthInputContainer = document.getElementById('colWidthInputContainer');

            // If there's no HTML input, clear the output and return early
            if (html === '') {
                document.getElementById('outputJson').value = '';
                document.getElementById('tablePreview').innerHTML = ''; // Clear table preview if input is empty
                document.getElementById('tablePreviewTitle').style.display = 'none'; // Hide the title
                document.getElementById('viewFullTableButton').style.display = 'none'; // Hide the button
                tableHeadingsContainer.style.display = 'none'; // Hide the table headings
                return;
            }

            const filterOptions = {
                filterImages: document.getElementById('filterImages').checked,
                filterSpans: document.getElementById('filterSpans').checked,
                filterDivs: document.getElementById('filterDivs').checked,
                filterSVGs: document.getElementById('filterSVGs').checked,
                filterParagraphs: document.getElementById('filterParagraphs').checked,
                filterHR: document.getElementById('filterHR').checked,
                filterStyles: document.getElementById('filterStyles').checked,
                applyWidths: document.getElementById('applyWidths').checked
            };

            const customTableId = document.getElementById('customTableId').value.trim() || 'CustomTable-1';

            let outputJson = htmlTableToReadmeBlock(html, filterOptions, customTableId);
            outputJson = removeBrTags(outputJson);  // Remove <br> tags
            outputJson = removeSpacesAfterNewlines(outputJson);  // Remove spaces after \n
            document.getElementById('outputJson').value = outputJson;

            // Log the generated Markdown for debugging
            console.log("Generated Markdown:", outputJson);

            // Generate and display the table preview
            const previewHtml = generateTablePreview(outputJson);
            document.getElementById('tablePreview').innerHTML = previewHtml;

            // Show the title and button if the preview is generated
            const shouldShowPreview = previewHtml ? 'block' : 'none';
            document.getElementById('tablePreviewTitle').style.display = shouldShowPreview;
            document.getElementById('viewFullTableButton').style.display = shouldShowPreview;

            // Check if column headings are detected
            const hasHeadings = colWidthInputContainer.childElementCount > 0;
            tableHeadingsContainer.style.display = hasHeadings ? 'block' : 'none';

            updateTimestamp();
        }

        function generateTablePreview(markdown) {
            // Parse the markdown to extract the JSON data block
            const dataBlockMatch = markdown.match(/\[block:parameters\]\s*({[\s\S]*?})\s*\[\/block\]/);

            if (!dataBlockMatch) return '<p>No table data available.</p>';

            let jsonData;
            try {
                jsonData = JSON.parse(dataBlockMatch[1]);
            } catch (error) {
                console.error("Failed to parse JSON from markdown:", error);
                return '<p>No table data available.</p>';
            }

            const { data, cols, rows } = jsonData;
            if (!data || cols === undefined || rows === undefined) return '<p>No table data available.</p>';

            // Add styles to ensure table spans 100% width and has visible borders
            let tableHtml = `
        <div class="rdmd-table" style="width: 100%; border: 1px solid #ddd; border-collapse: collapse;">
            <div class="rdmd-table-inner">
                <table style="width: 100%; border-collapse: collapse;">
    `;

            // Construct the table header with a light grey background
            tableHtml += '<thead><tr style="background-color: #f5f5f5;">';
            for (let i = 0; i < cols; i++) {
                const headerContent = data[`h-${i}`].replace(/\*\*(.+?)\*\*/, '<strong>$1</strong>');
                const width = document.getElementById(`colWidth${i + 1}`)?.value || 'auto';
                const align = document.getElementById(`colAlign${i + 1}`)?.value || 'left';

                tableHtml += `<th style="text-align:${align}; padding: 8px; border: 1px solid #ddd; width: ${width};">${headerContent}</th>`;
            }
            tableHtml += '</tr></thead><tbody>';

            // Limit to the first two rows (rows 0 and 1 after the header)
            for (let rowIndex = 0; rowIndex < Math.min(2, rows); rowIndex++) {
                const rowStyle = rowIndex % 2 === 0 ? 'background-color: #ffffff;' : 'background-color: #f9f9f9;';
                tableHtml += `<tr style="${rowStyle}">`;
                for (let colIndex = 0; colIndex < cols; colIndex++) {
                    let cellContent = data[`${rowIndex}-${colIndex}`];

                    // Convert markdown links to <a> tags
                    cellContent = cellContent.replace(/\[(.+?)\]\((.+?)\)/g, '<a target="_self" href="$2">$1</a>');

                    // Wrap lists with proper <ul> tags
                    cellContent = cellContent.replace(/<ul>/g, '<ul style="text-align:left;">');
                    cellContent = cellContent.replace(/<\/ul>/g, '</ul>');
                    cellContent = cellContent.replace(/<li>/g, '<li>');

                    // Convert newlines to <br> for multi-line content
                    cellContent = cellContent.replace(/\n/g, '<br>');

                    // Handle code blocks: replace backticks with <code> tags
                    cellContent = cellContent.replace(/`([^`]+)`/g, '<code style="background-color: #f6f8fa; border-radius: 3px; margin: 0; padding: .2em .4em;">$1</code>');

                    const width = document.getElementById(`colWidth${colIndex + 1}`)?.value || 'auto';
                    const align = document.getElementById(`colAlign${colIndex + 1}`)?.value || 'left';

                    tableHtml += `<td style="text-align:${align}; padding: 8px; border: 1px solid #ddd; width: ${width};">${cellContent}</td>`;
                }
                tableHtml += '</tr>';
            }

            tableHtml += '</tbody></table></div></div>';

            return tableHtml;
        }

        function generateFullTablePreview(html) {
            // Convert the input HTML directly into a table for full preview
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const tableElement = doc.querySelector('table');

            if (!tableElement) return '<p>No table data available.</p>';

            // Apply consistent styles used in the preview to the full table
            tableElement.style.width = '100%';
            tableElement.style.borderCollapse = 'collapse';

            // Remove existing inline styles
            tableElement.querySelectorAll('th, td').forEach(cell => {
                cell.removeAttribute('style');
                cell.style.padding = '8px';
                cell.style.border = '1px solid #ddd';
                cell.style.textAlign = 'left';
            });

            tableElement.querySelectorAll('tr').forEach((row, index) => {
                if (index === 0) {
                    row.style.backgroundColor = '#f5f5f5';
                } else {
                    row.style.backgroundColor = index % 2 === 0 ? '#ffffff' : '#f9f9f9';
                }
            });

            return tableElement.outerHTML;
        }

        function htmlTableToReadmeBlock(html, options, customTableId) {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const headers = [];
            const data = {};
            let rowIndex = 0;
            let colsCount = 0;

            const colWidthInputContainer = document.getElementById('colWidthInputContainer');
            const columnsDetected = document.getElementById('columnsDetected');

            const thElements = doc.querySelectorAll('thead th, table tr th');
            thElements.forEach((th, i) => {
                let headerContent = th.textContent.trim();

                // Limit header content to 30 characters
                if (headerContent.length > 30) {
                    headerContent = headerContent.substring(0, 30) + '...';
                }

                // Format the column label with a line break
                const columnLabel = `Column ${i + 1}:<br><span style="color: red;">${headerContent}</span>`;
                headers.push(columnLabel);
                data[`h-${i}`] = `**${headerContent}**`;
            });

            colsCount = headers.length;
            columnsDetected.textContent = `*${colsCount} Columns Detected`;  // Display the number of columns detected

            while (colWidthInputContainer.childElementCount > colsCount) {
                colWidthInputContainer.removeChild(colWidthInputContainer.lastChild);
            }

            for (let i = 0; i < colsCount; i++) {
                let columnDiv = colWidthInputContainer.children[i];

                if (!columnDiv) {
                    columnDiv = document.createElement('div');
                    columnDiv.classList.add('column');

                    const colLabel = document.createElement('label');
                    colLabel.innerHTML = headers[i];  // Use innerHTML to include the formatted column label with a break
                    columnDiv.appendChild(colLabel);

                    const colWidthInput = document.createElement('input');
                    colWidthInput.type = 'text';
                    colWidthInput.id = `colWidth${i + 1}`;
                    colWidthInput.placeholder = 'Width: px';
                    colWidthInput.disabled = !options.applyWidths;
                    columnDiv.appendChild(colWidthInput);

                    const colAlignSelect = document.createElement('select');
                    colAlignSelect.id = `colAlign${i + 1}`;
                    colAlignSelect.innerHTML = `
                <option value="left">Left</option>
                <option value="center">Center</option>
                <option value="right">Right</option>
            `;
                    colAlignSelect.disabled = !options.applyWidths;
                    columnDiv.appendChild(colAlignSelect);

                    colWidthInputContainer.appendChild(columnDiv);
                }
            }

            const trElements = doc.querySelectorAll('tbody tr, table tr');
            trElements.forEach((tr) => {
                const tdElements = tr.querySelectorAll('td');
                if (tdElements.length === 0) return;  // Skip rows with no data

                tdElements.forEach((td, j) => {
                    let cellContent = td.innerHTML.trim();
                    cellContent = convertLinks(cellContent); // Convert links to Markdown
                    cellContent = convertFormatting(cellContent); // Convert formatting
                    cellContent = cleanContent(cellContent, options); // Clean content
                    data[`${rowIndex}-${j}`] = cellContent;
                });
                rowIndex++;
            });

            const block = {
                data: data,
                cols: colsCount,
                rows: rowIndex,
                align: Array(colsCount).fill("left")
            };

            let styleBlock = '';
            if (options.applyWidths) {
                styleBlock = `<style>\n`;
                for (let i = 1; i <= colsCount; i++) {
                    const widthElement = document.getElementById(`colWidth${i}`);
                    const alignElement = document.getElementById(`colAlign${i}`);

                    const width = widthElement ? (widthElement.value || 'auto') : 'auto';
                    const align = alignElement ? alignElement.value : 'left';

                    styleBlock += `  table th:nth-child(${i}), table td:nth-child(${i}) { width: ${width}; text-align: ${align}; }\n`;
                }
                styleBlock += `</style>\n`;
            }

            let output = `<div id="${customTableId}">\n`;
            if (styleBlock) {
                output += `[block:html]\n{\n  "html": ${JSON.stringify(styleBlock)}\n}\n[/block]\n`;
            }

            output += `[block:parameters]\n${JSON.stringify(block, null, 2)}\n[/block]\n`;
            output += '</div>';

            return output;
        }

        function updateTimestamp() {
            const timestamp = new Date().toLocaleString('en-US', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
            });
            document.getElementById('timestamp').innerHTML = `<span style="color: #00ff00;padding-left:5px;"> ✔ CONVERTED:</span> ${timestamp} &nbsp; `;
        }

        function convertLinks(content) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = content;

            const links = tempDiv.querySelectorAll('a');
            links.forEach(link => {
                const href = link.getAttribute('href');
                const text = link.textContent.trim();
                const markdownLink = `[${text}](${href})`;
                link.outerHTML = markdownLink; // Replaces the entire anchor tag with the markdown link
            });

            return tempDiv.innerHTML;
        }

        function convertFormatting(content) {
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = content;

            const italics = tempDiv.querySelectorAll('em, i');
            italics.forEach(italic => {
                const text = italic.textContent.trim();
                const markdownItalic = `_${text}_`;
                italic.replaceWith(markdownItalic);
            });

            const bolds = tempDiv.querySelectorAll('strong, b');
            bolds.forEach(bold => {
                const text = bold.textContent.trim();
                const markdownBold = `**${text}**`;
                bold.replaceWith(markdownBold);
            });

            // Keep <br> tags as they are
            return tempDiv.innerHTML;
        }

        function cleanContent(content, options) {
            let cleanedContent = content;

            if (options.filterImages) {
                cleanedContent = cleanedContent.replace(/<img[^>]*>/g, '');
            }
            if (options.filterSpans) {
                cleanedContent = cleanedContent.replace(/<span[^>]*>/g, '').replace(/<\/span>/g, '');
            }
            if (options.filterDivs) {
                cleanedContent = cleanedContent.replace(/<div[^>]*>/g, '').replace(/<\/div>/g, '');
            }
            if (options.filterSVGs) {
                cleanedContent = cleanedContent.replace(/<svg[^>]*>[\s\S]*?<\/svg>/g, '');
            }
            if (options.filterParagraphs) {
                cleanedContent = cleanedContent.replace(/<p[^>]*>/g, '').replace(/<\/p>/g, '');
            }
            if (options.filterHR) {
                cleanedContent = cleanedContent.replace(/<hr[^>]*>/g, '');
            }
            if (options.filterStyles) {
                cleanedContent = cleanedContent.replace(/ style="[^"]*"/g, '').replace(/ class="[^"]*"/g, '');
            }

            // Replace <code> tags with backticks
            cleanedContent = cleanedContent.replace(/<code>(.*?)<\/code>/g, '`$1`');

            return cleanedContent;
        }

        function removeBrTags(content) {
            return content.replace(/<br\s*\/?>/g, ''); // Remove all <br> tags
        }

        function removeSpacesAfterNewlines(content) {
            return content.replace(/\\n\s+/g, '\\n'); // Remove spaces after \n
        }

    </script>

</body>

</html>
